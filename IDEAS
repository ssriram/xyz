___  ___ ___ __ ________
\  \/  /<   |  |\___   /
 >    <  \___  | /    /
/__/\_ \ / ____|/_____ \
      \/ \/           \/

XYZ
---

- A simple hackable scripting language for simply hacking!
- A small scheme like implementation born out of pure hobby hacking by ssriram <http://thenaughtyguy.blogspot.com>

Intended Features
-----------------

>   Its obvious to find that many languages differ only in functionality and not in syntax
>   while some differ only in syntax and not in functionality. Keeping in mind that
>   some are very elegant in syntax and some very elegant in functionality,
>   I was wondering how it would look if i could bridge some of these
>   syntactics and functionalities into one single language making appropriate trade-offs?

- These are some of the common scripting languages that I figured out that
some of their good features can into xyz.

    * lua - small embeddable, prototype inheritance
    * ruby - good object oriented patterns, good library
    * python - good library (batteries), simple syntax, good string support
    * javascript - functional and C syntax, json, prototype inheritance, weak typing, regular expressions
    * scheme - functional and lisp syntax, r5rs,r6rs,r7rs standards for experimental hacking
    * add one more language with good features

- XYZ will try to be

    * small and embeddable
    * simple in syntax
    * support good object oriented and functional patterns
    * hackable
    * support good libraries

- My touches to syntax and ideas; some are plans and some are features !

    * types
        1. null
        2. boolean
        3. character
        4. number
            a. fixnum
            b. flonum
        5. string
            a. double quote strings
            b. python style triple quote strings
        6. symbol
        7. s-expression ()
        8. vector []
        9. map {}
        10. js style regular expressions //

    * syntax is a mix of json and scheme with some good trade-offs
    * json? yes; any valid json expression is valid xyz map type
    * null is null symbol
    * boolean - true or false denoted by respective symbols; thus the boolean true and false are not #t #f as in scheme
    * characters are c-like 'a','b' not #\a
    * flonum is double -0.234e-23.455
    * fixnum is long int 2342342424324234
        - hex integer 0xf4
        - binary integer 0b101010101
        - octal integer 04567

    * strings
        - smart strings a.k.a strings with '\0' in them
        - escape sequences
        - hex string "\x03\xde\x34"
        - double quote strings with newline " "
        - python style triple quoted strings """ """
        - unicode???

    * define is (def ...)
    * functions a.k.a lambda forms are (fn ...)
    * begin is (do ...) kind of lambda
    * index sexpr
        - (index list-sexpr 9) returns 9th element of sexpr list
        > of list-name or fallsback to the last element, no fiddling like
        > (cadr (cadddr (caddddr list-name))) also adding support for -ve index
        > which can fallback to the first element.
        - support car and cdr, also first,rest, ff,fr,ffr,fff,etc.

    * quote is ! not '
    * quasi-quote is `
    * unquote is ~ not ,
    * unquote-splicing is ~@ not ,@

    * vector is [] as in array type of json
    * maps are hashtables as in {} object literal of json
    * garbage collection
    * namespaces using maps
    * python style module system using maps; remote import method a.k.a import from internet
    * serialized binary modules, which can be easily loaded

    * async io/network api
    * bytecode compiler and interpreter/vm
    * write xyz in xyz and bootstrap
